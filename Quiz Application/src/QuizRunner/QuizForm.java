/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package QuizRunner;
import QuizApp.Core.Quiz;
import QuizApp.Core.Answer;
import QuizApp.Core.Question;
import Helper.DbAccess;
import QuizApp.Core.Answer;
import QuizApp.Core.Question;
import QuizApp.Core.Quiz;
import Users.*;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.ButtonModel;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.Timer;
/**
 *
 * @author Anton
 */
public class QuizForm extends javax.swing.JFrame {

    /**
     * Creates new form QuizForm
     */
    public QuizForm(Quiz Quiz, User User) {
        quiz = Quiz;
        initComponents();
        if (quiz.randomiseQuestions) 
                {
                    Collections.shuffle(quiz.questionList);
                }
        qIndex = 0;
        quiztimer = new Timer(1000, timerHit);
        ShowQuestion(qIndex);
        setVisible(true);
        user = User;
        timeLeft = Quiz.timeLimit * 60;
        this.setExtendedState(Frame.MAXIMIZED_BOTH);
        this.setUndecorated(true);
        
        
        
            }
    private Quiz quiz;
    private int qIndex;
    private User user;
    private int timeLeft;
    private Map<Integer, Integer> selectedAnswers = new HashMap<Integer, Integer>();
    Timer quiztimer;
    private QuizForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AnswerButtons = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        TimeLbl = new javax.swing.JLabel();
        qnumLbl = new javax.swing.JLabel();
        nextQBtn = new javax.swing.JButton();
        QuestionPanel = new javax.swing.JPanel();
        prevQbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TimeLbl.setText("jLabel1");

        qnumLbl.setText("jLabel2");

        nextQBtn.setText("jButton1");
        nextQBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout QuestionPanelLayout = new javax.swing.GroupLayout(QuestionPanel);
        QuestionPanel.setLayout(QuestionPanelLayout);
        QuestionPanelLayout.setHorizontalGroup(
            QuestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        QuestionPanelLayout.setVerticalGroup(
            QuestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 305, Short.MAX_VALUE)
        );

        prevQbtn.setText("jButton1");
        prevQbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevQbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TimeLbl)
                    .addComponent(qnumLbl))
                .addGap(224, 224, 224)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 440, Short.MAX_VALUE)
                        .addComponent(prevQbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nextQBtn)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(QuestionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(TimeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qnumLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(QuestionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextQBtn)
                    .addComponent(prevQbtn))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextQBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQBtnActionPerformed
        //store response!
     setResponse();
     
        //Show next question
        if (qIndex < quiz.questionList.size() - 1)
        {
            qIndex++;
            ShowQuestion(qIndex);
        }
        else
        {
            saveResults();
        }
        
        
    }//GEN-LAST:event_nextQBtnActionPerformed
    private void startTimer()
    {
        
        quiztimer.start();
        
    }
    ActionListener timerHit = new ActionListener(){
        public void actionPerformed(ActionEvent evt){
            timeLeft -= 1;
            String timestring = String.format("%d : %d", timeLeft /60, timeLeft %60);
            TimeLbl.setText(timestring);
            if (timeLeft == 0)
            {
                quiztimer.stop();
                performTimeOut();
            }
    }

        private void performTimeOut() {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    };
    private void setResponse()
    {
        try{
        ButtonModel bm = AnswerButtons.getSelection();
        String selectedind = bm.getActionCommand();
        
        selectedAnswers.put(quiz.questionList.get(qIndex).dbId, Integer.parseInt(selectedind));
        }
        catch (NullPointerException npe)
        {
            //If no answer was selected, this gets thrown!! Catching it stops it breaking really.
        }
    }
    private void prevQbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevQbtnActionPerformed
        setResponse();
        if(qIndex > 0)
        {
            ShowQuestion(qIndex - 1);
            qIndex--;
        }
    }//GEN-LAST:event_prevQbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuizForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuizForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuizForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuizForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuizForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup AnswerButtons;
    private javax.swing.JPanel QuestionPanel;
    private javax.swing.JLabel TimeLbl;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton nextQBtn;
    private javax.swing.JButton prevQbtn;
    private javax.swing.JLabel qnumLbl;
    // End of variables declaration//GEN-END:variables
/**
 * Displays questions in the questionpanel
 * @param i = question index
 */
    private void ShowQuestion(int i) {
        
        Question cq = quiz.questionList.get(i);
        QuestionPanel.removeAll();
        AnswerButtons.clearSelection();
        if (quiz.randomiseQuestions)
        {
            Collections.shuffle(cq.answers);
        }
        JLabel qtextLbl = new JLabel(cq.questionText);
        qtextLbl.setSize(qtextLbl.getPreferredSize());
        int ypos = 20;
        qtextLbl.setLocation(0, ypos);
        QuestionPanel.add(qtextLbl);
        int ind = 0;
        int selected = 0;
        if (selectedAnswers.containsKey(cq.dbId))
        {
            selected = selectedAnswers.get(cq.dbId);
        }
        
        for (Answer a : cq.answers)
        {
            ypos += 20;
            JRadioButton jrb = new JRadioButton(a.answerText);
            jrb.setSize(jrb.getPreferredSize());
            jrb.setLocation(0, ypos);
            jrb.getModel().setActionCommand(Integer.toString(a.dbId)); //this is how we can tell which answer was picked
           
            AnswerButtons.add(jrb);
            QuestionPanel.add(jrb);
             if(selected == a.dbId)
            {
                jrb.setSelected(true);
            }
            ind++;
        }
        QuestionPanel.setVisible(true);
        QuestionPanel.repaint();
        //setVisible(true);
        qnumLbl.setText("Question " + Integer.toString(i + 1) + " of " + quiz.questionList.size());
        if(!quiztimer.isRunning())
        {
            startTimer();
        }
        if(i==0)
        {
            prevQbtn.setEnabled(false);
        }
        else
        {
            prevQbtn.setEnabled(true);
        }
        
        
    }

    private void saveResults() {
        
        Boolean saved = DbAccess.saveResults(quiz.quizDBId, selectedAnswers, user.dbId);
        if (saved)
        {
            QuestionPanel.setBackground(Color.green);
        }
    }
    
}
